//--------------------------------------------------
//  
//      Verilog code generated by Visual HDL
//
//  Root of Design:
//  ---------------
//      Unit    Name  :  test_VideoProc
//      Library Name  :  DE2_VGA
//  
//      Creation Date :  Tue Oct 11 11:45:07 2022
//      Version       :  6.7.2-pc build 25 from Feb 19 2001
//  
//  Options Used:
//  -------------
//      Target
//         HDL        :  Verilog
//         Purpose    :  Simulation
//  
//      Style
//         Use tasks                      :  No
//         Code Destination               :  Combined file
//         Attach Directives              :  Yes
//         Structural                     :  No
//         Free text style                :  / / ...
//         Preserve spacing for free text :  Yes
//         Sort Ports by mode             :  No
//         Declaration alignment          :  No
//
//--------------------------------------------------
//--------------------------------------------------
//  
//  Library Name :  DE2_VGA
//  Unit    Name :  VGA_CTRL
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
module VGA_CTRL (
	CLK,
	RST_N,
	CamHsync_EDGE,
	CamVsync_EDGE,
	VgaLineCount,
	VgaPixCount,
	VgaVisible,
	VgaVsync,
	VgaHsync,
	VgaHsync_edge,
	OddFrame
); 

input		CLK, RST_N;
input CamHsync_EDGE, CamVsync_EDGE;
output	[8:0] VgaLineCount;
output	[9:0] VgaPixCount;
output	VgaVisible, VgaVsync,	VgaHsync, VgaHsync_edge, OddFrame;

reg VgaPixCount_enb;
reg [9:0] VgaPixCount_sig;
reg [8:0] VgaLineCount_sig;
reg VgaVisible_sig;
reg VgaFrameCount;
wire VgaHsync_sig, VgaVsync_sig;
reg VgaHsync_tmp, VgaVsync_tmp;
wire VgaPixCount_clr ;
wire VgaLineCount_enb;
wire VgaLineCount_clr;
wire VgaVisible_H;
wire VgaVisible_V;

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
		VgaPixCount_enb  <= 0;
	end else begin
		VgaPixCount_enb <= !VgaPixCount_enb;
	end
end

///////////////////////////////////////////////////////
assign VgaPixCount_clr = (VgaPixCount_enb == 1'b1 && VgaPixCount_sig == 783)
                      || CamHsync_EDGE == 1'b1 ? 1 : 0; 

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
		VgaPixCount_sig <= 0;
	end else begin
		if(VgaPixCount_clr == 1'b1) begin
			VgaPixCount_sig <= 0;
		end else if( VgaPixCount_enb == 1'b1 ) begin
			VgaPixCount_sig <= VgaPixCount_sig + 1;
		end
	end
end

assign VgaPixCount = VgaPixCount_sig;

assign VgaLineCount_enb = (VgaPixCount_sig == 783 && VgaPixCount_enb == 1'b1) ? 1 : 0;
assign VgaLineCount_clr = (VgaPixCount_clr == 1'b1 && VgaLineCount_sig == 509) ? 1 : 0;

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
		VgaLineCount_sig  <= 0;
	end else begin
		if(VgaLineCount_clr == 1'b1 || CamVsync_EDGE == 1'b1) begin
			VgaLineCount_sig  <= 0;
		end else if(VgaLineCount_enb == 1'b1) begin 
			VgaLineCount_sig  <= VgaLineCount_sig  + 1;
		end
	end
end


assign VgaLineCount = VgaLineCount_sig;

assign VgaVisible_H = (VgaPixCount_sig >= 134 && VgaPixCount_sig < 776) ? 1 : 0;  
assign VgaHsync_sig = (VgaPixCount_sig >= 96) ? 1 : 0; 
assign VgaHsync_edge = (VgaPixCount_sig == 96) ? 1 : 0;

assign VgaVisible_V = (VgaLineCount_sig >= 17 && VgaLineCount_sig < 498) ? 1 : 0;
assign VgaVsync_sig = (VgaLineCount_sig >= 500 && VgaLineCount_sig <= 501) ? 0 : 1;

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
		VgaVisible_sig <= 0;
	end else begin
		if(VgaPixCount_enb == 1'b1) begin
			VgaVisible_sig <= VgaVisible_V & VgaVisible_H;
		end
	end
end

assign VgaVisible = VgaVisible_sig;

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N or posedge CamVsync_EDGE )
begin
	if (RST_N == 1'b0 || CamVsync_EDGE == 1'b1) begin
		VgaFrameCount <= 0;
	end else begin
		if(VgaPixCount_enb == 1'b1 && VgaLineCount_enb == 1'b1 && VgaLineCount_sig == 1) begin
			VgaFrameCount <= !VgaFrameCount;
		end
	end
end

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
		VgaHsync_tmp <= 0;
	end else begin
		if(VgaPixCount_enb == 1'b1) begin
			VgaHsync_tmp <= VgaHsync_sig;
		end
	end
end

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
		VgaVsync_tmp <= 0;
	end else begin
		if(VgaPixCount_enb == 1'b1) begin
			VgaVsync_tmp <= VgaVsync_sig;
		end
	end
end

assign VgaHsync = VgaHsync_tmp;
assign VgaVsync = VgaVsync_tmp;
assign OddFrame = !VgaFrameCount;

endmodule



//--------------------------------------------------
//  
//  Library Name :  DE2_VGA
//  Unit    Name :  CAM_CTRL
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
module CAM_CTRL (
	CLK,
	RST_N,
	PCLK,
	CamHsync,
	CamVsync,
	CamData,
	LB_WR_ADDR,
	LB_WR_DATA,
	LB_WR_N,
	CamHsync_EDGE,
	CamVsync_EDGE,
	CamLineCount,
	CamPixCount4x
); 

input	CLK, RST_N;
output	[8:0] CamLineCount;
output	[15:0] CamPixCount4x;
output	[9:0] LB_WR_ADDR;
output	[15:0] LB_WR_DATA;
output  LB_WR_N;
input CamHsync, CamVsync;
input [7:0] CamData;
input PCLK;
output CamHsync_EDGE, CamVsync_EDGE;

reg [15:0] CamPixCount4x_sig;
reg [10:0] PclkPixCount;
reg CamHsync_dly1, CamHsync_dly2;
wire CamHsync_edge_sig; 
reg CamVsync_dly1, CamVsync_dly2;
wire CamVsync_edge_sig; 
wire Rg_dec, gB_dec;
reg Rg_dec_dly1, Rg_dec_dly2;
reg [7:0] Rg_latch, gB_latch;
reg [9:0] PclkPixCount_dly1, PclkPixCount_dly2;
reg [8:0] CamLineCount_sig;


///////////////////////////////////////////////////////
always @(posedge PCLK or negedge RST_N or posedge CamHsync_edge_sig)
begin
	if (RST_N == 1'b0 || CamHsync_edge_sig == 1'b1) begin
		PclkPixCount <= 0;
	end else begin
	  PclkPixCount <= PclkPixCount + 1;
	end
end

///////////////////////////////////////////////////////
assign Rg_dec = !PclkPixCount[0];
assign gB_dec = PclkPixCount[0];

///////////////////////////////////////////////////////
always @(posedge PCLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     Rg_latch <= 0;
	end else begin
	   if(Rg_dec == 1'b1) begin
       Rg_latch <= CamData;
     end
	end
end

///////////////////////////////////////////////////////
always @(posedge PCLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     gB_latch <= 0;
	end else begin
	   if(gB_dec == 1'b1) begin
       gB_latch <= CamData;
     end
	end
end

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     CamPixCount4x_sig <= 0;
	end else begin
	   if(CamPixCount4x_sig == 3135 || CamHsync_edge_sig == 1'b1) begin
       CamPixCount4x_sig <= 0;
     end else begin
       CamPixCount4x_sig <= CamPixCount4x_sig + 1;
     end
	end
end

assign CamPixCount4x = CamPixCount4x_sig;

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     Rg_dec_dly2 <= 0;
     Rg_dec_dly1 <= 0;
	end else begin
     Rg_dec_dly2 <= Rg_dec_dly1;
     Rg_dec_dly1 <= Rg_dec;
	end
end

///////////////////////////////////////////////////////
always @(posedge PCLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     PclkPixCount_dly2 <= 0;
     PclkPixCount_dly1 <= 0;
	end else begin
     PclkPixCount_dly2 <= PclkPixCount_dly1;
     PclkPixCount_dly1 <= PclkPixCount[10:1];
	end
end

///////////////////////////////////////////////////////
assign LB_WR_N = (Rg_dec_dly1 == 1'b1 && Rg_dec_dly2 == 1'b0) ? 1'b0 : 1'b1;
assign LB_WR_DATA = {Rg_latch, gB_latch};
assign LB_WR_ADDR = PclkPixCount_dly2;

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     CamHsync_dly2 <= 0;
     CamHsync_dly1 <= 0;
	end else begin
     CamHsync_dly2 <= CamHsync_dly1;
     CamHsync_dly1 <= CamHsync;
	end
end

///////////////////////////////////////////////////////
assign  CamHsync_edge_sig = (CamHsync_dly1 == 1'b0 && CamHsync_dly2 == 1'b1) ? 1'b1 : 1'b0;

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     CamVsync_dly2 <= 0;
     CamVsync_dly1 <= 0;
	end else begin
     CamVsync_dly2 <= CamVsync_dly1;
     CamVsync_dly1 <= CamVsync;
	end
end

///////////////////////////////////////////////////////
assign CamVsync_edge_sig = (CamVsync_dly1 == 1'b0 && CamVsync_dly2 == 1'b1) ? 1'b1 : 1'b0;
assign CamVsync_EDGE = CamVsync_edge_sig;

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     CamLineCount_sig <= 0;
	end else begin
	   if(CamVsync_edge_sig == 1'b1) begin
       CamLineCount_sig <= 0;
     end else if( CamHsync_edge_sig == 1'b1) begin
       CamLineCount_sig <= CamLineCount_sig + 1;
     end
	end
end

///////////////////////////////////////////////////////
assign CamLineCount = CamLineCount_sig;
assign CamHsync_EDGE = CamHsync_edge_sig;

endmodule

//--------------------------------------------------
//  
//  Library Name :  DE2_VGA
//  Unit    Name :  SRAM
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
module SRAM (
	CLK,
  CS_N,
  WR_N,
  WRADDR,
  RDADDR,
  WRDATA,
  RDDATA
); 

input	CLK;
input CS_N, WR_N;
input [9:0] WRADDR;
input [9:0] RDADDR;
input [15:0] WRDATA;
output [15:0] RDDATA;

reg [15:0] RAMDATA [0:1024];
reg [15:0] RDDATA_sig;

///////////////////////////////////////////////////////
// sram write
always @(posedge CLK)
begin
	if (CLK == 1'b1) begin
	  if(CS_N == 0 && WR_N == 0) begin
    		RAMDATA[WRADDR] <= WRDATA;
		end
	end
end

///////////////////////////////////////////////////////
// sram read
always @(posedge CLK)
begin
	if (CLK == 1'b1) begin
	  if(CS_N == 0 && WR_N == 1) begin
    		RDDATA_sig <= RAMDATA[RDADDR];
		end else begin
    		RDDATA_sig <= 0;
    end
  	end
end

assign RDDATA = RDDATA_sig;

endmodule
//--------------------------------------------------
//  
//  Library Name :  DE2_VGA
//  Unit    Name :  LINEIN_CTRL
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
module LINEIN_CTRL (
	CLK,
	RST_N,
	LB_WR_ADDR,
	LB_WR_DATA,
	LB_WR_N,
	VgaLineCount,
	VgaPixCount,
	buf_RGB
); 

input		CLK, RST_N;
input	[9:0] LB_WR_ADDR;
input	[15:0] LB_WR_DATA;
input LB_WR_N;
input [8:0] VgaLineCount;
input [9:0] VgaPixCount;
output [15:0] buf_RGB;

wire ODDLINE;
reg oddline_dly1, oddline_dly2;
reg [9:0] LB_RD_ADDR;
wire [15:0] LB_RD_DATA_A;
wire [15:0] LB_RD_DATA_B;
wire LB_WR_N_B;
wire LB_WR_N_A;
wire LB_CS_N;
reg [15:0] buf_RGB;

SRAM SRAM_A (
  .CLK(CLK),
  .CS_N(LB_CS_N),
  .WR_N(LB_WR_N_A),
  .WRADDR(LB_WR_ADDR),
  .RDADDR(LB_RD_ADDR),
  .WRDATA(LB_WR_DATA),
  .RDDATA(LB_RD_DATA_A)
); 

SRAM SRAM_B (
  .CLK(CLK),
  .CS_N(LB_CS_N),
  .WR_N(LB_WR_N_B),
  .WRADDR(LB_WR_ADDR),
  .RDADDR(LB_RD_ADDR),
  .WRDATA(LB_WR_DATA),
  .RDDATA(LB_RD_DATA_B)
); 

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     oddline_dly2 <= 0;
     oddline_dly1 <= 0;
	end else begin
     oddline_dly2 <= oddline_dly1;
     oddline_dly1 <= ODDLINE;
	end
end

assign ODDLINE = VgaLineCount[1];

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     buf_RGB <= 0;
	end else begin
    if(oddline_dly2 == 0) begin
      buf_RGB <= LB_RD_DATA_B;
    end else begin 
      buf_RGB <= LB_RD_DATA_A;
    end    
	end
end

///////////////////////////////////////////////////////
always @(posedge CLK or negedge RST_N)
begin
	if (RST_N == 1'b0) begin
     LB_RD_ADDR <= 0;
	end else begin
     LB_RD_ADDR <= VgaPixCount[9:0] + 20;
	end
end

assign LB_WR_N_A = (oddline_dly2 == 0) ? LB_WR_N : 1; 
assign LB_WR_N_B = (oddline_dly2 == 1) ? LB_WR_N : 1; 
assign LB_CS_N = 0;

endmodule
//--------------------------------------------------
//  
//  Library Name :  DE2_VGA
//  Unit    Name :  VideoProcCore
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
module VideoProcCore (
	CLK,
	RST_N,
	XCLK,
	CamHsync,
	CamVsync,
	PCLK,
  CamData,
	VgaVsync,
	VgaHsync,
	SW0,
	SW1,
   VgaDataR,
   VgaDataG,
   VgaDataB	
); 

input		CLK, RST_N;
output	XCLK;
input	CamHsync;
input CamVsync;
input PCLK;
input [7:0]CamData;
output	VgaVsync;
output	VgaHsync;
input SW0;
input SW1;
output	[7:0] VgaDataR	;
output	[7:0] VgaDataG	;
output	[7:0] VgaDataB	;

wire CamHsync_EDGE, CamVsync_EDGE;
wire [9:0] LB_WR_ADDR;
wire [15:0] LB_WR_DATA;
wire LB_WR_N;
wire [8:0] VgaLineCount;
wire [9:0] VgaPixCount;
wire [15:0] buf_RGB;
wire [8:0] CamLineCount;
wire [15:0] CamPixCount4x;
wire VgaVisible, VgaVsync, VgaHsync, VgaHsync_edge, OddFrame;
wire [7:0] buf_r, buf_g, buf_b;

assign VgaDataR = (VgaVisible == 1 && ((OddFrame == 1 && SW0 == 0) || (OddFrame == 0 && SW1 == 0)))
                    ? buf_r : 8'h00;
assign VgaDataG = (VgaVisible == 1 && ((OddFrame == 1 && SW0 == 0) || (OddFrame == 0 && SW1 == 0)))
                    ? buf_g : 8'h00;
assign VgaDataB = (VgaVisible == 1 && ((OddFrame == 1 && SW0 == 0) || (OddFrame == 0 && SW1 == 0)))
                    ? buf_b : 8'h00;

assign buf_r = {buf_RGB[15 : 11], 3'b000};
assign buf_g = {buf_RGB[10 : 5], 2'b00};
assign buf_b = {buf_RGB[4 : 0], 3'b000};

assign XCLK = CamPixCount4x[0];

	LINEIN_CTRL LINEIN_CTRL_inst(
	.CLK(CLK),
	.RST_N(RST_N),
	.LB_WR_ADDR(LB_WR_ADDR),
	.LB_WR_DATA(LB_WR_DATA),
	.LB_WR_N(LB_WR_N),
	.VgaLineCount(VgaLineCount),
	.VgaPixCount(VgaPixCount),
	.buf_RGB(buf_RGB)
);

	CAM_CTRL CAM_CTRL_inst(
	.CLK(CLK),
	.RST_N(RST_N),
	.PCLK(PCLK),
	.CamHsync(CamHsync),
	.CamVsync(CamVsync),
	.CamData(CamData),
	.LB_WR_ADDR(LB_WR_ADDR),
	.LB_WR_DATA(LB_WR_DATA),
	.LB_WR_N(LB_WR_N),
	.CamHsync_EDGE(CamHsync_EDGE),
	.CamVsync_EDGE(CamVsync_EDGE),
	.CamLineCount(CamLineCount),
	.CamPixCount4x(CamPixCount4x)
);

	VGA_CTRL VGA_CTRL_inst (
	.CLK(CLK),
	.RST_N(RST_N),
	.CamHsync_EDGE(CamHsync_EDGE),
	.CamVsync_EDGE(CamVsync_EDGE),
	.VgaLineCount(VgaLineCount),
	.VgaPixCount(VgaPixCount),
	.VgaVisible(VgaVisible),
	.VgaVsync(VgaVsync),
	.VgaHsync(VgaHsync),
	.VgaHsync_edge(VgaHsync_edge),
	.OddFrame(OddFrame)
); 
endmodule
//--------------------------------------------------
//  
//  Library Name :  DE2_VGA
//  Unit    Name :  VideoProc
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
module VideoProc (
	CLK,
	RST_N,
	XCLK,
	SCL,
	SDA,
	CamHsync,
	CamVsync,
	PCLK,
  CamData,
	VgaVsync,
	VgaHsync,
	SW0,
	SW1,
   VgaDataR,
   VgaDataG,
   VgaDataB	
); 

input		CLK, RST_N;
output	XCLK;
output SCL, SDA;
input	CamHsync;
input CamVsync;
input PCLK;
input [7:0]CamData;
output	VgaVsync;
output	VgaHsync;
input SW0;
input SW1;
output	[7:0] VgaDataR	;
output	[7:0] VgaDataG	;
output	[7:0] VgaDataB	;

	VideoProcCore VideoProcCore_inst(
		.CLK(CLK),
		.RST_N(RST_N),
	.XCLK(XCLK),
	.CamHsync(CamHsync),
	.CamVsync(CamVsync),
	.PCLK(PCLK),
  .CamData(CamData),
	.VgaVsync(VgaVsync),
	.VgaHsync(VgaHsync),
	.SW0(SW0),
	.SW1(SW1),
   .VgaDataR(VgaDataR),
   .VgaDataG(VgaDataG),
   .VgaDataB(VgaDataB)	
	);

endmodule
//--------------------------------------------------
//  
//  Library Name :  DE2_VGA
//  Unit    Name :  testsub_VideoProc
//  Unit    Type :  Text Unit
//  
//----------------------------------------------------
//////////////////////////////////////////
//////////////////////////////////////////
// Date        : Tue Oct 11 11:17:37 2022
//
// Author      : JBLee
//
// Company     : Onbitel
//
// Description : 
//
//////////////////////////////////////////
//////////////////////////////////////////
module  testsub_VideoProc (XCLK, SCL, SDA, VgaVsync, VgaHsync, VgaDataR, VgaDataG, VgaDataB, CLK, RST_N, CamHsync, CamVsync, PCLK, CamData, SW0, SW1);
   input XCLK ;
   input SCL ;
   input SDA ;
   input VgaVsync ;
   input VgaHsync ;
   input [7:0] VgaDataR ; wire [7:0] VgaDataR ;
   input [7:0] VgaDataG ; wire [7:0] VgaDataG ;
   input [7:0] VgaDataB ; wire [7:0] VgaDataB ;
   output CLK ;
   output RST_N ;
   output CamHsync ;
   output CamVsync ;
   output PCLK ;
   output [7:0] CamData ; wire [7:0] CamData ;
   output SW0 ;
   output SW1 ;

    reg                 reset_n ;
    reg                 r_clk50m ;
    reg                 r_clk25m ;

   assign CLK   = r_clk50m;
   assign RST_N = reset_n;

   assign PCLK = r_clk25m;
   assign SW0 = 1'b0;
   assign SW1 = 1'b0;

    // !!!!!!!
   assign CamHsync = 1'b0;
   assign CamVsync = 1'b0;
   assign CamData = 8'hA5;


    initial begin
        reset_n = 0 ;
        #499.84 reset_n = 1 ;
    end

    initial begin
        r_clk50m = 0 ;
    end          
    
    always #10      r_clk50m <= ~r_clk50m ;

    always @(posedge r_clk50m or negedge reset_n)
    begin
        if(reset_n == 1'b0)
        begin
            r_clk25m <= 1'b0;
        end else begin
            r_clk25m <= ~r_clk25m;
        end 
    end

endmodule



//--------------------------------------------------
//  
//  Library Name :  DE2_VGA
//  Unit    Name :  test_VideoProc
//  Unit    Type :  Block Diagram
//  
//----------------------------------------------------
 
 
module test_VideoProc;
 
  wire [7:0] CamData;
  wire [7:0] S21;
  wire [7:0] S22;
  wire [7:0] S23;
  wire [7:0] S29;
  wire [7:0] VgaDataB;
  wire [7:0] VgaDataG;
  wire [7:0] VgaDataR;
 
  testsub_VideoProc  testsub_VideoProc
    (
     .XCLK(XCLK),
     .SCL(SCL),
     .SDA(SDA),
     .VgaVsync(VgaVsync),
     .VgaHsync(VgaHsync),
     .VgaDataR(VgaDataR[7:0]),
     .VgaDataG(VgaDataG[7:0]),
     .VgaDataB(VgaDataB[7:0]),
     .CLK(CLK),
     .RST_N(RST_N),
     .CamHsync(CamHsync),
     .CamVsync(CamVsync),
     .PCLK(PCLK),
     .CamData(CamData[7:0]),
     .SW0(SW0),
     .SW1(SW1));
 
  VideoProc  C1
    (
     .CLK(CLK),
     .RST_N(RST_N),
     .XCLK(XCLK),
     .SCL(SCL),
     .SDA(SDA),
     .CamHsync(CamHsync),
     .CamVsync(CamVsync),
     .PCLK(PCLK),
     .CamData(S29[7:0]),
     .VgaVsync(VgaVsync),
     .VgaHsync(VgaHsync),
     .SW0(SW0),
     .SW1(SW1),
     .VgaDataR(S21[7:0]),
     .VgaDataG(S22[7:0]),
     .VgaDataB(S23[7:0]));
 
 
endmodule

